--- a/build/Makefile
+++ b/build/Makefile
@@ -62,6 +62,7 @@ $(DRV_NAME)-objs += $(SRC_DIR)/rate_ctrl
 
 $(DRV_NAME)-objs += $(SRC_DIR)/os/linux/rt_proc.o
 $(DRV_NAME)-objs += $(SRC_DIR)/os/linux/rt_linux.o
+$(DRV_NAME)-objs += $(SRC_DIR)/os/linux/rt_flash.o
 $(DRV_NAME)-objs += $(SRC_DIR)/os/linux/rt_profile.o
 $(DRV_NAME)-objs += $(SRC_DIR)/os/linux/rt_main_dev.o
 $(DRV_NAME)-objs += $(SRC_DIR)/os/linux/ap_ioctl.o
--- a/src/include/chip/rt2880.h
+++ b/src/include/chip/rt2880.h
@@ -37,7 +37,7 @@
 
 #ifdef LINUX
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,21)
-#include <asm/rt2880/rt_mmap.h>
+#include "rt_mmap.h"
 #define RTMP_MAC_CSR_ADDR RALINK_11N_MAC_BASE
 #else
 
--- a/src/include/iface/rtmp_rbs.h
+++ b/src/include/iface/rtmp_rbs.h
@@ -38,7 +38,7 @@
   *
   ************************************************************************/  
 
-#define RTMP_MAC_IRQ_NUM		4
+#define RTMP_MAC_IRQ_NUM		6
 
 
 /*************************************************************************
--- a/src/include/video.h
+++ b/src/include/video.h
@@ -8,5 +8,6 @@ UCHAR GetAsicDefaultTxBA(IN PRTMP_ADAPTE
 UINT32 GetAsicVideoRetry(IN PRTMP_ADAPTER pAd);
 UCHAR GetAsicVideoTxBA(IN PRTMP_ADAPTER pAd);
 VOID VideoConfigInit(IN PRTMP_ADAPTER pAd);
+VOID VideoTurbineDynamicTune(IN PRTMP_ADAPTER pAd);
 #endif /* VIDEO_TURBINE_SUPPORT */
 
--- /dev/null
+++ b/src/os/linux/rt_flash.c
@@ -0,0 +1,132 @@
+#include <linux/module.h>
+#include <linux/types.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/version.h>
+#include <linux/err.h>
+#include <linux/slab.h>
+#include <linux/delay.h>
+#include <linux/sched.h>
+#include <linux/backing-dev.h>
+#include <linux/compat.h>
+#include <linux/mount.h>
+#include <linux/mtd/mtd.h>
+#include <linux/mtd/map.h>
+#include <linux/mtd/concat.h>
+#include <linux/mtd/partitions.h>
+
+struct proc_dir_entry *procRegDir;
+/*
+ * Flash API: ra_mtd_read, ra_mtd_write
+ * Arguments:
+ *   - num: specific the mtd number
+ *   - to/from: the offset to read from or written to
+ *   - len: length
+ *   - buf: data to be read/written
+ * Returns:
+ *   - return -errno if failed
+ *   - return the number of bytes read/written if successed
+ */
+int ra_mtd_write_nm(char *name, loff_t to, size_t len, const u_char *buf)
+{
+    int ret = -1;
+    size_t rdlen, wrlen;
+    struct mtd_info *mtd;
+    struct erase_info ei;
+    u_char *bak = NULL;
+
+    mtd = get_mtd_device_nm(name);
+
+    if (IS_ERR(mtd)) {
+        ret = (int)mtd;
+        goto out;
+    }
+
+    if (len > mtd->erasesize) {
+        put_mtd_device(mtd);
+        ret = -E2BIG;
+        goto out;
+    }
+
+    bak = kzalloc(mtd->erasesize, GFP_KERNEL);
+    if (bak == NULL) {
+        put_mtd_device(mtd);
+        ret = -ENOMEM;
+        goto out;
+    }
+
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,3,0)
+    ret = mtd_read(mtd, 0, mtd->erasesize, &rdlen, bak);
+#else
+    ret = mtd->read(mtd, 0, mtd->erasesize, &rdlen, bak);
+#endif
+    if (ret) {
+        goto free_out;
+    }
+
+    if (rdlen != mtd->erasesize)
+        printk("warning: ra_mtd_write_nm: rdlen is not equal to erasesize\n");
+
+    memcpy(bak + to, buf, len);
+
+    ei.mtd = mtd;
+    ei.callback = NULL;
+    ei.addr = 0;
+    ei.len = mtd->erasesize;
+    ei.priv = 0;
+
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,3,0)
+    ret = mtd_erase(mtd, &ei);
+#else
+    ret = mtd->erase(mtd, &ei);
+#endif
+    if (ret != 0)
+        goto free_out;
+
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,3,0)
+    ret = mtd_write(mtd, 0, mtd->erasesize, &wrlen, bak);
+#else
+    ret = mtd->write(mtd, 0, mtd->erasesize, &wrlen, bak);
+#endif
+
+    udelay(10); /* add delay after write */
+
+free_out:
+    if (mtd)
+        put_mtd_device(mtd);
+
+    if (bak)
+        kfree(bak);
+out:
+    return ret;
+}
+
+int ra_mtd_read_nm(char *name, loff_t from, size_t len, u_char *buf)
+{
+    int ret;
+    size_t rdlen = 0;
+    struct mtd_info *mtd;
+
+    mtd = get_mtd_device_nm(name);
+    if (IS_ERR(mtd))
+        return (int)mtd;
+
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,3,0)
+    ret = mtd_read(mtd, from, len, &rdlen, buf);
+#else
+    ret = mtd->read(mtd, from, len, &rdlen, buf);
+#endif
+    if (rdlen != len)
+        printk("warning: ra_mtd_read_nm: rdlen is not equal to len\n");
+
+    put_mtd_device(mtd);
+    return ret;
+}
+
+EXPORT_SYMBOL(ra_mtd_write_nm);
+EXPORT_SYMBOL(ra_mtd_read_nm);
+EXPORT_SYMBOL(procRegDir);
+
+MODULE_AUTHOR("Steven Liu <steven_liu@ralinktech.com.tw>");
+MODULE_DESCRIPTION("Ralink APSoC Flash Map");
+MODULE_LICENSE("GPL");
--- a/src/os/linux/rt_proc.c
+++ b/src/os/linux/rt_proc.c
@@ -61,7 +61,7 @@ int wl_proc_exit(void);
 #endif /* PROCREG_DIR */
 
 #ifdef CONFIG_PROC_FS
-extern struct proc_dir_entry *procRegDir;
+struct proc_dir_entry *procRegDir2860v2;
 
 #ifdef VIDEO_TURBINE_SUPPORT
 extern BOOLEAN UpdateFromGlobal;
@@ -381,7 +381,7 @@ int wl_video_proc_init(void)
 	GLOBAL_AP_VIDEO_CONFIG.TxLifeTime = 0;
 	GLOBAL_AP_VIDEO_CONFIG.TxRetryLimit = 0;
 
-		proc_ralink_wl = proc_mkdir("wl", procRegDir);
+		proc_ralink_wl = proc_mkdir("wl", procRegDir2860v2);
 
 	if (proc_ralink_wl)
 		proc_ralink_wl_video = proc_mkdir("VideoTurbine", proc_ralink_wl);
@@ -498,10 +498,10 @@ int wl_video_proc_exit(void)
 
 int wl_proc_init(void)
 {
-	if (procRegDir == NULL)
-		procRegDir = proc_mkdir(PROCREG_DIR, NULL);
+	if (procRegDir2860v2 == NULL)
+		procRegDir2860v2 = proc_mkdir(PROCREG_DIR, NULL);
 
-	if (procRegDir) {
+	if (procRegDir2860v2) {
 #ifdef VIDEO_TURBINE_SUPPORT
 		wl_video_proc_init();
 #endif /* VIDEO_TURBINE_SUPPORT */
@@ -518,7 +518,7 @@ int wl_proc_exit(void)
 		remove_proc_entry("Video", proc_ralink_wl);
 	}
 	if (proc_ralink_wl)
-		remove_proc_entry("wl", procRegDir);
+		remove_proc_entry("wl", procRegDir2860v2);
 #endif /* VIDEO_TURBINE_SUPPORT */
 
 	
